#include <iostream>
#include <cmath>
#include "StNpeRead.h"
#include "StCuts.h"
//#include "StDmesonEvent.h"
#include "StTRIGGERS.h"
//#include "StNpeMaker/StDmesonEvent.h"
#include "prescales.h"
#include "StDmesonMaker/StDmesonTrack.h"

#include "StDmesonMaker/StElectronPair.h"

#include "StLorentzVectorF.hh"

#include "TH1D.h"
#include "TH1F.h"
#include "TH2F.h"
#include "TH3F.h"
#include "TFile.h"
#include "TClonesArray.h"
#include "TTree.h"
#include "TNtuple.h"
#include "TMath.h"
#include "TF1.h"
#include "TCanvas.h"
#include "TDirectory.h"
#include "TClonesArray.h"


//Float_t KAONMASS2 = 0.49367 * 0.49367;
//Float_t PHIMASS = 1.01945; // GeV/c/c

using namespace std;

ClassImp(StNpeRead)
//-----------------------------------------------------------------------------
StNpeRead::StNpeRead(const char* outName)
{
   mOutputFile = new TFile(outName, "RECREATE");
   TH1F::SetDefaultSumw2();
       mPrescales=prescales::Instance();
}

//-----------------------------------------------------------------------------
StNpeRead::~StNpeRead()
{
   /*  */
}

//-----------------------------------------------------------------------------
void StNpeRead::bookObjects()
{
  mNpeEvent = new StDmesonEvent;
    HT0_HT2=new TH2F("HT0_HT2","",2,0,2,2,0,2);
 
  ADC_nocut=new TH3F("ADC_nocut","",100,0,100,20,0,2000,20,0,2000);
   ADC_cut=new TH3F("ADC_cut","",100,0,100,20,0,200,200,0,2000);
   mh1Vz_BBCMBTOF0=new TH1F(Form("mh1Vz_BBCMBTOF0"),"",200,-120,120);
   mh1Vz_BBCMB=new TH1F(Form("mh1Vz_BBCMB"),"",200,-120,120);
   mh1Vz_BBCMBTOF0PS=new TH1F(Form("mh1Vz_BBCMBTOF0PS"),"",200,-120,120);
   mh1Vz_BBCMBPS=new TH1F(Form("mh1Vz_BBCMBPS"),"",200,-120,120);
   
   for(Int_t iTrg=0;iTrg<3;iTrg++ )
     {
       mh2DSMADC_Inclusive[iTrg]=new TH2F(Form("mh2DSMADC_InclusiveTrg%i",iTrg),"",100,0,100,200,0,20);
       mh1TowerID_Inclusive[iTrg]=new TH1F(Form("mh1TowerID_InclusiveTrg%i",iTrg),"",4800,0,4800);
       mh1TowerID_cut_Inclusive[iTrg]=new TH1F(Form("mh1TowerID_cut_InclusiveTrg%i",iTrg),"",4800,0,4800);
       
       mh1TowerID_all_Inclusive[iTrg]=new TH1F(Form("mh1TowerID_all_InclusiveTrg%i",iTrg),"",4800,0,4800);
       mh2DSMADC_PhotoUnlike[iTrg]=new TH2F(Form("mh2DSMADC_PhotoUnlikeTrg%i",iTrg),"",100,0,100,200,0,20);
       mh2DSMADC_Photolike[iTrg]=new TH2F(Form("mh2DSMADC_PhotolikeTrg%i",iTrg),"",100,0,100,200,0,20);
       
       mh2ADC0_Inclusive[iTrg]=new TH2F(Form("mh2ADC0_InclusiveTrg%i",iTrg),"",1500,0,1500,200,0,20);
       mh2ADC0_PhotoUnlike[iTrg]=new TH2F(Form("mh2ADC0_PhotoUnlikeTrg%i",iTrg),"",1500,0,1500,200,0,20);
       mh2ADC0_Photolike[iTrg]=new TH2F(Form("mh2ADC0_PhotolikeTrg%i",iTrg),"",1500,0,1500,200,0,20);
       
       mh2ADC0_DSMadcInclusive[iTrg]=new TH2F(Form("mh2ADC0_DSMadcInclusiveTrg%i",iTrg),"",1500,0,1500,100,0,100);
       mh2ADC0_DSMadcPhotoUnlike[iTrg]=new TH2F(Form("mh2ADC0_DSMadcPhotoUnlikeTrg%i",iTrg),"",1500,0,1500,100,0,100);
       mh2ADC0_DSMadcPhotolike[iTrg]=new TH2F(Form("mh2ADC0_DSMadcPhotolikeTrg%i",iTrg),"",1500,0,1500,100,0,100);

       mh2DsmADCUnlike[iTrg]=new TH2F(Form("mh2DsmADCUnlikeTrg%i",iTrg),"",100,0,100,200,0,20);
       mh2DsmADClike[iTrg]=new TH2F(Form("mh2DsmADClikeTrg%i",iTrg),"",100,0,100,200,0,20);
       
       mh2Btowadc0[iTrg]=new TH2F(Form("mh2Btowadc0Trg%i",iTrg),"",2000,0,2000,200,0,20);
       mh2InvMassPoeUnlike[iTrg] = new TH2F(Form("mh2InvMassPoeUnlikeTrg%i",iTrg),"",40,0,0.4,200,0,20.);
       mh2PoeUnlike[iTrg] = new TH2F(Form("mh2PoeUnlikeTrg%i",iTrg),"",100,0,2.5,200,0,20.);
       mh2InvMassPoelike[iTrg] = new TH2F(Form("mh2InvMassPoelikeTrg%i",iTrg),"",40,0,0.4,200,0,20.);
       mh2Poelike[iTrg] = new TH2F(Form("mh2PoelikeTrg%i",iTrg),"",100,0,2.5,200 ,0,20.);
       mh2InvMassDzUnlike[iTrg] = new TH2F(Form("mh2InvMassDzUnlikeTrg%i",iTrg),"",40,0,0.4,200 ,0,20.);
       mh2DzUnlike[iTrg] = new TH2F(Form("mh2DzUnlikeTrg%i",iTrg),"",100,-5,5,200 ,0,20.);
       mh2InvMassDzlike[iTrg] = new TH2F(Form("mh2InvMassDzlikeTrg%i",iTrg),"",40,0,0.4,200 ,0,20.);
       mh2Dzlike[iTrg] = new TH2F(Form("mh2DzlikeTrg%i",iTrg),"",100,-5,5,200 ,0,20.);
       
       
       mh2InvMassDpUnlike[iTrg] = new TH2F(Form("mh2InvMassDpUnlikeTrg%i",iTrg),"",40,0,0.4,200 ,0,20.);  
       mh2DpUnlike[iTrg] = new TH2F(Form("mh2DpUnlikeTrg%i",iTrg),"",50,-0.1,0.1,200 ,0,20.);
       mh2InvMassDplike[iTrg] = new TH2F(Form("mh2InvMassDplikeTrg%i",iTrg),"",40,0,0.4,200 ,0,20.);
       mh2Dplike[iTrg] = new TH2F(Form("mh2DplikeTrg%i",iTrg),"",50,-0.1,0.1,200 ,0,20.);

       mh2InvMassEMCUnlike[iTrg] = new TH2F(Form("mh2InvMassEMCUnlikeTrg%i",iTrg),"",40,0,0.4,200 ,0,20.);  
       mh2InvMassEMClike[iTrg] = new TH2F(Form("mh2InvMassEMClikeTrg%i",iTrg),"",40,0,0.4,200 ,0,20.);
       mh2NPhiUnlike[iTrg] = new TH2F(Form("mh2NPhiUnlikeTrg%i",iTrg),"",10,0,10,200 ,0,20.);
       mh2NPhilike[iTrg] = new TH2F(Form("mh2NPhilikeTrg%i",iTrg),"",10,0,10,200 ,0,20.);
       
       mh2NEtaUnlike[iTrg] = new TH2F(Form("mh2NEtaUnlikeTrg%i",iTrg),"",10,0,10,200 ,0,20.);

       mh2NEtalike[iTrg] = new TH2F(Form("mh2NEtalikeTrg%i",iTrg),"",10,0,10,200 ,0,20.);
       
       mh2InvMassNEMCUnlike[iTrg] = new TH2F(Form("mh2InvMassNEMCUnlikeTrg%i",iTrg),"",40,0,0.4,200 ,0,20.);  
      mh2InvMassNEMClike[iTrg] = new TH2F(Form("mh2InvMassNEMClikeTrg%i",iTrg),"",40,0,0.4,200 ,0,20.);
      mh2InvMassNEEMCUnlike[iTrg] = new TH2F(Form("mh2InvMassNEEMCUnlikeTrg%i",iTrg),"",40,0,0.4,200 ,0,20.);  
      mh2InvMassNEEMClike[iTrg] = new TH2F(Form("mh2InvMassNEEMClikeTrg%i",iTrg),"",40,0,0.4,200 ,0,20.);
      mh2InvMassNPEMCUnlike[iTrg] = new TH2F(Form("mh2InvMassNPEMCUnlikeTrg%i",iTrg),"",40,0,0.4,200 ,0,20.);  
      mh2InvMassNPEMClike[iTrg] = new TH2F(Form("mh2InvMassNPEMClikeTrg%i",iTrg),"",40,0,0.4,200 ,0,20.);

      mh3nSigPart_EMCUnlike[iTrg] = new TH3F(Form("mh3nSigPart_EMCUnlikeTrg%i",iTrg),"",140,-7,7,200 ,0,20.,40,0,0.4);
      mh3nSigPart_EMClike[iTrg] = new TH3F(Form("mh3nSigPart_EMClikeTrg%i",iTrg),"",140,-7,7,200 ,0,20.,40,0,0.4);

      mh3nSigPart_TREMCUnlike[iTrg] = new TH3F(Form("mh3nSigPart_TREMCUnlikeTrg%i",iTrg),"",140,-7,7,200 ,0,20.,40,0,0.4);
      mh3nSigPart_TREMClike[iTrg] = new TH3F(Form("mh3nSigPart_TREMClikeTrg%i",iTrg),"",140,-7,7,200 ,0,20.,40,0,0.4);

      mh3nSigPart_ADCTREMCUnlike[iTrg] = new TH3F(Form("mh3nSigPart_ADCTREMCUnlikeTrg%i",iTrg),"",140,-7,7,40 ,0,40.,40,0,0.4);
      mh3nSigPart_ADCTREMClike[iTrg] = new TH3F(Form("mh3nSigPart_ADCTREMClikeTrg%i",iTrg),"",140,-7,7,40 ,0,40.,40,0,0.4);
 

      
      mh3nSigEUnlike[iTrg] = new TH3F(Form("mh3nSigEUnlikeTrg%i",iTrg),"",140,-7,7,200 ,0,20.,40,0,0.4);
      mh3nSigPartUnlike[iTrg] = new TH3F(Form("mh3nSigPartUnlikeTrg%i",iTrg),"",140,-7,7,200 ,0,20.,40,0,0.4);
      mh3nSigPartlike[iTrg] = new TH3F(Form("mh3nSigPartlikeTrg%i",iTrg),"",140,-7,7,200 ,0,20.,40,0,0.4);
      mh3nSigElike[iTrg] = new TH3F(Form("mh3nSigElikeTrg%i",iTrg),"",140,-7,7,200 ,0,20.,40,0,0.4);
      //all cuts applied
      mh2InvMassUnlike[iTrg]=new TH2F(Form("mh2InvMassUnlikeTrg%i",iTrg),"",40,0,0.4,200 ,0,20.);
      mh2InvMasslike[iTrg]=new TH2F(Form("mh2InvMasslikeTrg%i",iTrg),"",40,0,0.4,200 ,0,20);

      mh3EMC_PartUnlike[iTrg]=new TH3F(Form("mh3EMC_PartUnlikeTrg%i",iTrg),"",140,-7,7,200 ,0,20.,40,0,0.4);
      mh3EMC_Partlike[iTrg]=new TH3F(Form("mh3EMC_PartlikeTrg%i",iTrg),"",140,-7,7,200 ,0,20,40,0,0.4);
      mh3EMC_ADCPartUnlike[iTrg]=new TH3F(Form("mh3EMC_ADCPartUnlikeTrg%i",iTrg),"",140,-7,7,40 ,0,40.,40,0,0.4);
      mh3EMC_ADCPartlike[iTrg]=new TH3F(Form("mh3EMC_ADCPartlikeTrg%i",iTrg),"",140,-7,7,40 ,0,40,40,0,0.4);     
      mh3EtaPhiUnlike[iTrg]=new TH3F(Form("mh3EtaPhiUnlikeTrg%i",iTrg),"",20 ,-1,1,80,-4,4,200,0,20);
      mh3EtaPhilike[iTrg]=new TH3F(Form("mh3EtaPhilikeTrg%i",iTrg),"",20 ,-1,1,80,-4,4,200,0,20);
   

      //for inclusive elctron
      mh2nSigmaElec[iTrg] = new TH2F(Form("mh2nSigmaElecTrg%i",iTrg),"",200,-10,10,200 ,0,20.);
      mh1electronPt[iTrg]=new TH1F(Form("mh1electronPtTrg%i",iTrg),"",200,0,20.);
      
      mh1Vz[iTrg] = new TH1F(Form("mh1VzTrg%i",iTrg),"",200,-120,120);
      mh1VzPS[iTrg] = new TH1F(Form("mh1VzPSTrg%i",iTrg),"",200,-120,120);     
 //      mh1Vz_BBCMB=new TH1F(Form("mh1Vz_BBCMB"),"",200,-120,120);
      mh2Vxy[iTrg]=new TH2F(Form("mh2VxyTrg%i",iTrg),"",200,0,0.3,200,0,0.1);
      //for dataQA
      mPhi_ptUnlike[iTrg]=new TH2F(Form("mPhi_ptUnlikeTrg%i",iTrg)," ",200,0,20,400,-4,4);
      mEta_ptUnlike[iTrg]=new TH2F(Form("mEta_ptUnlikeTrg%i",iTrg)," ",200,0,20,300,-1.5,1.5);
      mPhi_ptlike[iTrg]=new TH2F(Form("mPhi_ptlikeTrg%i",iTrg)," ",200,0,20,400,-4,4);
      mEta_ptlike[iTrg]=new TH2F(Form("mEta_ptlikeTrg%i",iTrg)," ",200,0,20,300,-1.5,1.5);
     
      mHitFit_ptUnlike[iTrg] =new TH2F(Form("mHitFit_ptUnlikeTrg%i",iTrg)," ",200,0,20,60,0,60);
      mHitFit_ptlike[iTrg] =new TH2F(Form("mHitFit_ptlikeTrg%i",iTrg)," ",200,0,20,60,0,60);
      mNSMDEta_ptUnlike[iTrg]=new TH2F(Form("mNSMDEta_ptUnlikeTrg%i",iTrg)," ",200,0,20,10,0,10);
      mNSMDEta_ptlike[iTrg]=new TH2F(Form("mNSMDEta_ptlikeTrg%i",iTrg)," ",200,0,20,10,0,10);
      mNSMDPhi_ptUnlike[iTrg]=new TH2F(Form("mNSMDPhi_ptUnlikeTrg%i",iTrg)," ",200,0,20,10,0,10);
      mNSMDPhi_ptlike[iTrg]=new TH2F(Form("mNSMDPhi_ptlikeTrg%i",iTrg)," ",200,0,20,10,0,10);
      mHitsDedxUnlike[iTrg]=new TH2F(Form("mHitsDedxUnlikeTrg%i",iTrg)," ",200,0,20,60,0,60);
      mHitsDedxlike[iTrg]=new TH2F(Form("mHitsDedxlikeTrg%i",iTrg)," ",200,0,20,60,0,60);

      mNTracklike[iTrg]=new TH1F(Form("mNTracklikeTrg%i",iTrg)," ",200,0,20);
      mNTrackUnlike[iTrg]=new TH1F(Form("mNTrackUnlikeTrg%i",iTrg)," ",200,0,20);

      mNTrack_cutUnlike[iTrg]=new TH1F(Form("mNTrack_cutUnlikeTrg%i",iTrg)," ",200,0,20);
      mNTrack_cutlike[iTrg]=new TH1F(Form("mNTrack_cutlikeTrg%i",iTrg)," ",200,0,20);     

      mNTrack_cut25Unlike[iTrg]=new TH1F(Form("mNTrack_cut25UnlikeTrg%i",iTrg)," ",200,0,20);
      mNTrack_cut25like[iTrg]=new TH1F(Form("mNTrack_cut25likeTrg%i",iTrg)," ",200,0,20);

      mNTrack_cut20Unlike[iTrg]=new TH1F(Form("mNTrack_cut20UnlikeTrg%i",iTrg)," ",200,0,20);
      mNTrack_cut20like[iTrg]=new TH1F(Form("mNTrack_cut20likeTrg%i",iTrg)," ",200,0,20);


      mFitPos_ptlike[iTrg]=new TH2F(Form("mFitPos_ptlikeTrg%i",iTrg)," ",200,0,20,100,0,1);
      mFitPos_ptUnlike[iTrg]=new TH2F(Form("mFitPos_ptUnlikeTrg%i",iTrg)," ",200,0,20,100,0,1);
     
      mgDcalike[iTrg]=new TH2F(Form("mgDcalikeTrg%i",iTrg),"",200,0,20,50,0,5);
      mgDcaUnlike[iTrg]=new TH2F(Form("mgDcaUnlikeTrg%i",iTrg),"",200,0,20,50,0,5);

      mNsigElike[iTrg]=new TH2F(Form("mNsigElikeTrg%i",iTrg),"",200,0,20,50,-5,5);
      mNsigEUnlike[iTrg]=new TH2F(Form("mNsigEUnlikeTrg%i",iTrg),"",200,0,20,50,-5,5);

      mDedxlike[iTrg]=new TH2F(Form("mDedxlikeTrg%i",iTrg),"",200,0,20,60,1,6);
      mDedxUnlike[iTrg]=new TH2F(Form("mDedxUnlikeTrg%i",iTrg),"",200,0,20,60,1,6);
     
      mPoeUnlike[iTrg] = new TH2F(Form("mPoeUnlikeTrg%i",iTrg),"",100,0,2.5,200,0,20.);
      mPoelike[iTrg] = new TH2F(Form("mPoelikeTrg%i",iTrg),"",100,0,2.5,200,0,20.);
      //for dataQA
 
    }
}

//-----------------------------------------------------------------------------
void StNpeRead::writeObjects()
{
   mOutputFile->cd();
   ADC_nocut->Write();
    ADC_cut->Write();
   
    mh1Vz_BBCMB->Write();
    mh1Vz_BBCMBTOF0->Write();
    mh1Vz_BBCMBPS->Write();
    mh1Vz_BBCMBTOF0PS->Write();
    HT0_HT2->Write();
   for(Int_t iTrg=0;iTrg<3;iTrg+=2)
     {    
       //for trigger sdudy
       mh2DSMADC_Inclusive[iTrg]->Write();
       mh2DSMADC_PhotoUnlike[iTrg]->Write();
       mh2DSMADC_Photolike[iTrg]->Write();

       mh2ADC0_Inclusive[iTrg]->Write();
       mh2ADC0_PhotoUnlike[iTrg]->Write();
       mh2ADC0_Photolike[iTrg]->Write();

       
       mh1TowerID_Inclusive[iTrg]->Write();
       mh1TowerID_cut_Inclusive[iTrg]->Write();

       mh1TowerID_all_Inclusive[iTrg]->Write();
       mh2ADC0_DSMadcInclusive[iTrg]->Write();
       mh2ADC0_DSMadcPhotoUnlike[iTrg]->Write();
       mh2ADC0_DSMadcPhotolike[iTrg]->Write();
       //

         mh2DsmADCUnlike[iTrg]->Write();
	 mh2DsmADClike[iTrg]->Write();
         mh2Btowadc0[iTrg]->Write();
       mh2InvMassPoeUnlike[iTrg]->Write();
       mh2PoeUnlike[iTrg]->Write();
       mh2InvMassPoelike[iTrg]->Write();  
       mh2Poelike[iTrg]->Write();
       mh2InvMassDzUnlike[iTrg]->Write();
       mh2DzUnlike[iTrg]->Write();
       mh2InvMassDzlike[iTrg]->Write();
       mh2Dzlike[iTrg]->Write();
       
       mh2InvMassDpUnlike[iTrg]->Write();
       mh2DpUnlike[iTrg]->Write();
       mh2InvMassDplike[iTrg]->Write();
       mh2Dplike[iTrg]->Write();

       mh2InvMassEMCUnlike[iTrg]->Write();
       mh2InvMassEMClike[iTrg]->Write();

       mh2InvMassNEMCUnlike[iTrg]->Write();
       mh2InvMassNEMClike[iTrg]->Write();
       mh2InvMassNEEMCUnlike[iTrg]->Write();
       mh2InvMassNEEMClike[iTrg]->Write();
       mh2InvMassNPEMCUnlike[iTrg]->Write();
       mh2InvMassNPEMClike[iTrg]->Write();
       mh2NPhiUnlike[iTrg]->Write();
       mh2NPhilike[iTrg]->Write();
       mh2NEtaUnlike[iTrg]->Write();
       mh2NEtalike[iTrg]->Write();

       mh3nSigPart_EMCUnlike[iTrg]->Write();
       mh3nSigPart_EMClike[iTrg]->Write();

       mh3nSigPart_TREMCUnlike[iTrg]->Write();
       mh3nSigPart_TREMClike[iTrg]->Write();

       mh3nSigPart_ADCTREMCUnlike[iTrg]->Write();
       mh3nSigPart_ADCTREMClike[iTrg]->Write();

       mh3nSigEUnlike[iTrg]->Write();
       mh3nSigPartUnlike[iTrg]->Write();
       mh3nSigElike[iTrg]->Write();
       mh3nSigPartlike[iTrg]->Write();
       
       mh3EMC_PartUnlike[iTrg]->Write();
       mh3EMC_Partlike[iTrg]->Write();
       mh3EMC_ADCPartUnlike[iTrg]->Write();
       mh3EMC_ADCPartlike[iTrg]->Write();
       mh3EtaPhiUnlike[iTrg]->Write();
       mh3EtaPhilike[iTrg]->Write();     
       mh2InvMasslike[iTrg]->Write();
       mh2InvMassUnlike[iTrg]->Write();
       mh2nSigmaElec[iTrg]->Write();
       mh1electronPt[iTrg]->Write();
       //  mh2Partner[Pt];
       //for Event
       mh1Vz[iTrg]->Write();
       mh1VzPS[iTrg]->Write();     
  //       mh1Vz_BBCMB->Write();
       mh2Vxy[iTrg]->Write();
       //dataQA
           mPhi_ptUnlike[iTrg]->Write();
           mEta_ptUnlike[iTrg]->Write();
           mPhi_ptlike[iTrg]->Write();
           mEta_ptlike[iTrg]->Write();

           mHitFit_ptUnlike[iTrg]->Write();
           mNSMDEta_ptUnlike[iTrg]->Write();
           mHitsDedxUnlike[iTrg]->Write();
           mHitFit_ptlike[iTrg]->Write();
           mNSMDEta_ptlike[iTrg]->Write();
           mHitsDedxlike[iTrg]->Write();

	   mNTrackUnlike[iTrg]->Write();
	   mNTrack_cutUnlike[iTrg]->Write();
	   mNTracklike[iTrg]->Write();
	   mNTrack_cutlike[iTrg]->Write();
           mFitPos_ptlike[iTrg]->Write();
           mgDcalike[iTrg]->Write();
           mFitPos_ptUnlike[iTrg]->Write();
           mgDcaUnlike[iTrg]->Write();
	   mNSMDPhi_ptUnlike[iTrg]->Write();
	   mNSMDPhi_ptlike[iTrg]->Write();
	   mNTrack_cut25Unlike[iTrg]->Write();
	   mNTrack_cut25like[iTrg]->Write();
	   mNTrack_cut20Unlike[iTrg]->Write();
	   mNTrack_cut20like[iTrg]->Write();

	   mNsigElike[iTrg]->Write();
	   mNsigEUnlike[iTrg]->Write();

	   mDedxlike[iTrg]->Write();
	   mDedxUnlike[iTrg]->Write();
	   mPoeUnlike[iTrg] ->Write();
	   mPoelike[iTrg] ->Write();
     }

}
//-----------------------------------------------------------------------------
void StNpeRead::read(TString fileName)
{
  TFile* inFile = new TFile(fileName.Data());
  
   TTree* tree = (TTree*)inFile->Get("T");
   
   tree->GetBranch("dEvent")->SetAutoDelete(kFALSE);
   tree->SetBranchAddress("dEvent", &mNpeEvent);
   
   
   TClonesArray*   aTracks = 0;
   TClonesArray* aPairs=0;
   
   // events loop
   cout<<"Event"<<tree->GetEntriesFast()<<endl;
   for (UInt_t i = 0; i < tree->GetEntriesFast(); i++)
     {
       tree->GetEntry(i);
       Int_t bTrg=999;
       
       if(!isGoodEvent(mNpeEvent,bTrg)) continue;
         TH1F::SetDefaultSumw2();


	 // Double_t ps=0;
	 // if(bTrg==0)
	 // ps=mPrescales->GetPrescale(mNpeEvent->runId(),HT0BBCMBTOF0);
	 //	if(bTrg==2)
	 // ps=mPrescales->GetPrescale(mNpeEvent->runId(),HT2BBCMB);
	// cout<<" ps"<< ps<<endl;
	 //	if(ps<0) continue;

	 //	Fill_event_hist(mNpeEvent,bTrg,ps); 

       aPairs=mNpeEvent->electronPair();
       aTracks=mNpeEvent->tracks();
       // if(evt->isHT0_BBCMB_TOF0() || evt->isHT2_BBCMB())
       //       if(mNpeEvent->isHT0_BBCMB_TOF0())
       if( mNpeEvent->isBBCMB_TOF0())


       { 
	   bTrg=0;
	   Double_t  ps=1.0;
	     //mPrescales->GetPrescale(mNpeEvent->runId(),HT0BBCMBTOF0);
	   if(ps<0) continue;
	   
	   Fill_PhotonicE_hist( bTrg, mNpeEvent , ps );
	   Fill_Inclusive_hist( bTrg, mNpeEvent , ps );
	   Fill_event_hist(mNpeEvent,bTrg,ps);	
	 }
       //       if(mNpeEvent->isHT2_BBCMB())
       if(mNpeEvent->isBBCMB())

	
 {
	   bTrg=2;
	   Double_t  ps=1.0;
	   //mPrescales->GetPrescale(mNpeEvent->runId(),HT2BBCMB);
	   if(ps<0) continue;

	   Fill_PhotonicE_hist( bTrg, mNpeEvent , ps );
	   Fill_Inclusive_hist( bTrg, mNpeEvent , ps );
	   Fill_event_hist(mNpeEvent,bTrg,ps);	
	  
	 }
       /*
       for(Int_t it=0;it<mNpeEvent->nTracks();it++)
           {
               StDmesonTrack* trk = (StDmesonTrack*)aTracks->At(it);
               //all eID cuts except nsigmaE
               if(!((bTrg==0    &&  trk->trgTowDsmAdc()>11) 
                    || (bTrg==2  && trk->trgTowDsmAdc()>18)))  continue;
               
               //	   if(!((bTrg==0  && trk->adc0()>200  ) || (bTrg==1  && trk->trgTowDsmAdc()>15) || (bTrg==2  && trk->adc0()>300)))  continue;
               if(pass_cut_GoodTrack(trk)&& pass_cut_Pt_Eta(trk) &&  fabs(trk->zDist())<cuts::Dz_cut 
                  && fabs(trk->phiDist())<cuts::Dphi_cut &&  pass_cut_poe(trk) &&  pass_cut_EMC(trk))
                   {
		     mh2nSigmaElec[bTrg]->Fill(trk->nSigmaElectron(),trk->gMom().perp(),ps); 
                       if( pass_cut_nsigmaE(trk))
                           {
			     mh1electronPt[bTrg]->Fill(trk->gMom().perp(),ps);
			     mh2DSMADC_Inclusive[bTrg]->Fill(trk->trgTowDsmAdc(),trk->gMom().perp());
			     mh2ADC0_Inclusive[bTrg]->Fill(trk->adc0(),trk->gMom().perp());
			     // mh3ADC_Inclusive[bTrg]->Fill(trk->trgTowDsmAdc(),trk->adc0(),trk->gMom().perp());
                               // mh2Btowadc0[iTrg]->Fill(trk->adc0(),trk->gMom().perp());
                           }

                   }                       //cout<<"pt"<<endl;
                       if(trk->nEta()>cuts::NEta && trk->nPhi()>cuts::NPhi && fabs(trk->zDist())<cuts::Dz_cut && fabs(trk->phiDist())<cuts::Dphi_cut)
                           ADC_cut->Fill(trk->trgTowDsmAdc(),trk->trgTowAdc(),trk->adc0());
                       ADC_nocut->Fill(trk->trgTowDsmAdc(),trk->trgTowAdc(),trk->adc0());
                       
           }
       for(Int_t ip=0;ip<mNpeEvent->nElectronPair();ip++)
	 {   
	   StElectronPair* pair = (StElectronPair*)aPairs->At(ip);
	   StDmesonTrack* eTrk = (StDmesonTrack*)aTracks->At(pair->electronId());
	   StDmesonTrack* pTrk = (StDmesonTrack*)aTracks->At(pair->partnerId());
	   // cout<<"eTrk->F_adc()"<<endl;
	   //     cout<<"eTrk->F_adc0()"<<eTrk->F_adc0()<<endl; 
	   
	   if(!((pair->m()<0.24)  && pass_cut_Pt_Eta(eTrk)) )  continue;
	
	   //-------------------------------------------------------
	   
	 
	   if(pass_cut_nsigmaE(eTrk) && pass_cut_GoodTrack( eTrk))  // have no emc cut
		 {
		   Float_t nSigma_partner=pTrk->nSigmaElectron();
		   if(eTrk->charge()!=pTrk->charge())
		     {    
		       mh3nSigPart_EMCUnlike[bTrg]->Fill(nSigma_partner,eTrk->gMom().perp(),pair->m());   
		     }
		   if(eTrk->charge()==pTrk->charge()) 
		     {
		       mh3nSigPart_EMClike[bTrg]->Fill(nSigma_partner,eTrk->gMom().perp(),pair->m());
		     }
		 }
	   //---------------------------------------------------------------
	   if((bTrg==0  && eTrk->trgTowDsmAdc()>11)  || (bTrg==2  && eTrk->trgTowDsmAdc()>18))
		     //  if((bTrg==0) || (bTrg==1) || (bTrg==2))	
	     {
	       Fill_pair_hist(bTrg,pair,eTrk,pTrk,ps);
	     }
	   
	 }

       */
       
     } // ... end event loop
   
   inFile->Close();
}

void StNpeRead::Fill_Inclusive_hist(Int_t bTrg,StDmesonEvent * mNpeEvent ,Double_t ps )
{
  TClonesArray*   aTracks = 0;
  aTracks=mNpeEvent->tracks();
  
  for(Int_t it=0;it<mNpeEvent->nTracks();it++)
    {
      StDmesonTrack* trk = (StDmesonTrack*)aTracks->At(it);
      //all eID cuts except nsigmaE
      if(isHotTower(trk, bTrg)) continue;

      //	if(!((bTrg==0    &&  trk->trgTowDsmAdc()>11 && trk->adc0()>180)
      //   || (bTrg==2  && trk->trgTowDsmAdc()>18 && trk->adc0()>300)))  continue;
      
      //if(!(bTrg==0   || bTrg==2  ))  continue;
      
      //          if(!((bTrg==0  && trk->adc0()>200  ) || (bTrg==1  && trk->trgTowDsmAdc()>15) || (bTrg==2  && trk->adc0()>300)))  continue;         
      if(pass_cut_GoodTrack(trk)&& pass_cut_Pt_Eta(trk) &&  fabs(trk->zDist())<cuts::Dz_cut
	 && fabs(trk->phiDist())<cuts::Dphi_cut &&  pass_cut_poe(trk) &&  pass_cut_EMC(trk))
	{
	  mh2nSigmaElec[bTrg]->Fill(trk->nSigmaElectron(),trk->gMom().perp(),ps);
	  if( pass_cut_nsigmaE(trk))
	    {
	      mh1TowerID_all_Inclusive[bTrg]->Fill(trk->btowId());

	      if(trk->trgTowDsmAdc()>trk->adc0()*0.1)
		mh1TowerID_Inclusive[bTrg]->Fill(trk->btowId());
	      if(trk->trgTowDsmAdc()<trk->adc0()*0.1)
		{
	      mh1electronPt[bTrg]->Fill(trk->gMom().perp(),ps);
	      mh2DSMADC_Inclusive[bTrg]->Fill(trk->trgTowDsmAdc(),trk->gMom().perp());
	      mh2ADC0_Inclusive[bTrg]->Fill(trk->adc0(),trk->gMom().perp());
	      mh2ADC0_DSMadcInclusive[bTrg]->Fill(trk->adc0(),trk->trgTowDsmAdc());
	      mh1TowerID_cut_Inclusive[bTrg]->Fill(trk->btowId());

	      // mh3ADC_Inclusive[bTrg]->Fill(trk->trgTowDsmAdc(),trk->adc0(),trk->gMom().perp());                                             
	      // mh2Btowadc0[iTrg]->Fill(trk->adc0(),trk->gMom().perp());                                                                    
	    }
	    }
	}                       //cout<<"pt"<<endl;                                                                                                
      if(trk->nEta()>cuts::NEta && trk->nPhi()>cuts::NPhi && fabs(trk->zDist())<cuts::Dz_cut && fabs(trk->phiDist())<cuts::Dphi_cut)
	ADC_cut->Fill(trk->trgTowDsmAdc(),trk->trgTowAdc(),trk->adc0());
      ADC_nocut->Fill(trk->trgTowDsmAdc(),trk->trgTowAdc(),trk->adc0());

    }


}
void StNpeRead::Fill_PhotonicE_hist(Int_t bTrg,StDmesonEvent * mNpeEvent ,Double_t ps )
{
  TClonesArray*   aTracks = 0;
  TClonesArray* aPairs=0;
  aPairs=mNpeEvent->electronPair();
  aTracks=mNpeEvent->tracks();
 

 for(Int_t ip=0;ip<mNpeEvent->nElectronPair();ip++)
    {
      StElectronPair* pair = (StElectronPair*)aPairs->At(ip);
      StDmesonTrack* eTrk = (StDmesonTrack*)aTracks->At(pair->electronId());
      StDmesonTrack* pTrk = (StDmesonTrack*)aTracks->At(pair->partnerId());

      if(isHotTower(eTrk, bTrg))continue;
       if(eTrk->trgTowDsmAdc()>eTrk->adc0()*0.1) continue;
      if(!((pair->m()<0.24)  && pass_cut_Pt_Eta(eTrk)) )  continue;

      //---------------------------------------------------------------                                                                                  
      // if((bTrg==0  && eTrk->trgTowDsmAdc()>11 && eTrk->adc0()>180)  || (bTrg==2  && eTrk->trgTowDsmAdc()>18 && eTrk->adc0()>300))

	 //if(bTrg==0|| bTrg==2  )
	{
	  Fill_pair_hist(bTrg,pair,eTrk,pTrk,ps);
	}

    }


}
 void StNpeRead::Fill_pair_hist(Int_t iTrg,StElectronPair * pair, StDmesonTrack* eTrk,StDmesonTrack * pTrk ,Double_t ps )    //Fill ht0
{
  if(pass_cut_nsigmaE(eTrk) && fabs(eTrk->zDist())<cuts::Dz_cut && fabs(eTrk->phiDist())<cuts::Dphi_cut && pass_cut_EMC(eTrk)&& 
pass_cut_GoodTrack( eTrk))  //all cuts except poe
    {   Float_t poe=eTrk->gMom().mag()/eTrk->e0();
      
      if(eTrk->charge()!=pTrk->charge())
	{ 
	  //  cout<<"poe"<<poe<<endl;   
	  
	  mh2InvMassPoeUnlike[iTrg]->Fill(pair->m(),eTrk->gMom().perp());
	  mh2PoeUnlike[iTrg]->Fill(poe,eTrk->gMom().perp());   
	}
      if(eTrk->charge()==pTrk->charge()) 
	{
	  mh2InvMassPoelike[iTrg]->Fill(pair->m(),eTrk->gMom().perp());
	  mh2Poelike[iTrg]->Fill(poe,eTrk->gMom().perp());
	}
    }
  if(pass_cut_nsigmaE(eTrk) && pass_cut_poe(eTrk) && fabs(eTrk->phiDist())<cuts::Dphi_cut && pass_cut_GoodTrack( eTrk)&&  pass_cut_EMC(eTrk))  //all cuts except Zdist
    {   Float_t Dz=eTrk->zDist();
      if(eTrk->charge()!=pTrk->charge())
	{   // cout<<"Dz     "<<Dz<<endl;
	  
	  mh2InvMassDzUnlike[iTrg]->Fill(pair->m(),eTrk->gMom().perp());
	  mh2DzUnlike[iTrg]->Fill(Dz,eTrk->gMom().perp());   
	}
      if(eTrk->charge()==pTrk->charge()) 
	{
	  mh2InvMassDzlike[iTrg]->Fill(pair->m(),eTrk->gMom().perp());
	  mh2Dzlike[iTrg]->Fill(Dz,eTrk->gMom().perp());
	}
    }
  
  if(pass_cut_nsigmaE(eTrk) && pass_cut_poe(eTrk) && fabs( eTrk->zDist())<cuts::Dz_cut && pass_cut_EMC(eTrk) && pass_cut_GoodTrack( eTrk))  //all cuts except phiDist 
    {   Float_t Dp=eTrk->phiDist();
      // cout<<"Dp    "<<Dp<<endl;
      if(eTrk->charge()!=pTrk->charge())
	{    
	  mh2InvMassDpUnlike[iTrg]->Fill(pair->m(),eTrk->gMom().perp());
	  mh2DpUnlike[iTrg]->Fill(Dp,eTrk->gMom().perp());   
	}
      if(eTrk->charge()==pTrk->charge()) 
	{
	  mh2InvMassDplike[iTrg]->Fill(pair->m(),eTrk->gMom().perp());
	  mh2Dplike[iTrg]->Fill(Dp,eTrk->gMom().perp());
	}
    }
  if(pass_cut_nsigmaE(eTrk) && pass_cut_poe(eTrk) && fabs( eTrk->zDist())<cuts::Dz_cut && fabs(eTrk->phiDist())<cuts::Dphi_cut && pass_cut_GoodTrack( eTrk) &&  1<eTrk->nEta() && 1<eTrk->nPhi())  //all cuts applied except neta nphi  
   { //  Float_t Dp=eTrk->phiDist();
      // cout<<"Dp    "<<Dp<<endl;
      if(eTrk->charge()!=pTrk->charge())
	{    
	  mh2InvMassNEMCUnlike[iTrg]->Fill(pair->m(),eTrk->gMom().perp());
	  mh2NEtaUnlike[iTrg]->Fill(eTrk->nEta(),eTrk->gMom().perp());
	  mh2NPhiUnlike[iTrg]->Fill(eTrk->nPhi(),eTrk->gMom().perp());
	}
      if(eTrk->charge()==pTrk->charge()) 
	{
	  mh2InvMassNEMClike[iTrg]->Fill(pair->m(),eTrk->gMom().perp());
	  mh2NEtalike[iTrg]->Fill(eTrk->nEta(),eTrk->gMom().perp());
	  mh2NPhilike[iTrg]->Fill(eTrk->nPhi(),eTrk->gMom().perp());
	
	}
    }
  if(pass_cut_nsigmaE(eTrk) &&pass_cut_GoodTrack( eTrk))  // have no emc cut
    {
  
      // cout<<"DSMadc"<<eTrk->trgTowDsmAdc()<<endl;
      Float_t nSigma_partner=pTrk->nSigmaElectron();
      if(eTrk->charge()!=pTrk->charge())
	{    
	  mh2InvMassEMCUnlike[iTrg]->Fill(pair->m(),eTrk->gMom().perp());
	  mh3nSigPart_TREMCUnlike[iTrg]->Fill(nSigma_partner,eTrk->gMom().perp(),pair->m());   
	  mh3nSigPart_ADCTREMCUnlike[iTrg]->Fill(nSigma_partner,eTrk->trgTowDsmAdc(),pair->m()); 	
}
      if(eTrk->charge()==pTrk->charge()) 
	{
	  mh2InvMassEMClike[iTrg]->Fill(pair->m(),eTrk->gMom().perp());
	  mh3nSigPart_TREMClike[iTrg]->Fill(nSigma_partner,eTrk->gMom().perp(),pair->m());
	  mh3nSigPart_ADCTREMClike[iTrg]->Fill(nSigma_partner,eTrk->trgTowDsmAdc(),pair->m());
}
    }
  if( pass_cut_poe(eTrk) && fabs(eTrk->zDist())<cuts::Dz_cut && fabs(eTrk->phiDist())<cuts::Dphi_cut && pass_cut_EMC(eTrk) && pass_cut_GoodTrack( eTrk))  // all cuts except nsigmaE
    {
      // cout<< 
      Float_t nSigmaE=eTrk->nSigmaElectron();
      
      // cout<<"nSigmaE"<<nSigmaE<<endl;
        Float_t nSigma_partner=pTrk->nSigmaElectron();
      if(eTrk->charge()!=pTrk->charge())
	{    
	  mh3nSigEUnlike[iTrg]->Fill(nSigmaE,eTrk->gMom().perp(),pair->m());
	  mh3nSigPartUnlike[iTrg]->Fill(nSigma_partner,eTrk->gMom().perp(),pair->m());   
	}
      if(eTrk->charge()==pTrk->charge()) 
	{
	  mh3nSigElike[iTrg]->Fill(nSigmaE,eTrk->gMom().perp(),pair->m());
	  mh3nSigPartlike[iTrg]->Fill(nSigma_partner,eTrk->gMom().perp(),pair->m());
	}
    }
  /*
    if( pass_cut_poe(eTrk) && fabs(eTrk->zDist())<cuts::Dz_cut && fabs(eTrk->phiDist())<cuts::Dphi_cut && pass_cut_nsigmaE(eTrk) &&  pass_cut_EMC(eTrk) && 25 <eTrk->nHitsFit() &&  15 <eTrk->nHitsDedx() &&  eTrk->dca()<1.5 && eTrk->firstTpcPointR()<73 )  //all cuts applied except good track quality cuts
    {
      if(eTrk->charge()!=pTrk->charge())
	mNTrack_cut25Unlike[iTrg]->Fill(eTrk->gMom().perp());
      if(eTrk->charge()==pTrk->charge())
	mNTrack_cut25like[iTrg]->Fill(eTrk->gMom().perp());

}
  */
    if( pass_cut_poe(eTrk) && fabs(eTrk->zDist())<cuts::Dz_cut && fabs(eTrk->phiDist())<cuts::Dphi_cut && pass_cut_nsigmaE(eTrk) &&  pass_cut_EMC(eTrk) && 20 <eTrk->nHitsFit() &&  15 <eTrk->nHitsDedx() &&  eTrk->dca()<1.5 && eTrk->firstTpcPointR()<73)   //all cuts applied except good track quality cuts     
      {
	if(eTrk->charge()!=pTrk->charge())
	  {	  mNTrack_cut20Unlike[iTrg]->Fill(eTrk->gMom().perp());
	if(25 <eTrk->nHitsFit())
	  mNTrack_cut25Unlike[iTrg]->Fill(eTrk->gMom().perp());	 
	  }
	if(eTrk->charge()==pTrk->charge())
	  {
	    mNTrack_cut20like[iTrg]->Fill(eTrk->gMom().perp());
	    {  if(25 <eTrk->nHitsFit())
		mNTrack_cut25like[iTrg]->Fill(eTrk->gMom().perp());
	    }
	  }
 
      }

          if( pass_cut_poe(eTrk) && fabs(eTrk->zDist())<cuts::Dz_cut && fabs(eTrk->phiDist())<cuts::Dphi_cut && pass_cut_nsigmaE(eTrk)     &&  pass_cut_EMC(eTrk) && pass_cut_GoodTrack( eTrk))  //all cuts applied
    //   if(pass_cut_nsigmaE(eTrk)&&pass_cut_GoodTrack(eTrk))  //all cuts applied

 { 
        Float_t nSigma_partner=pTrk->nSigmaElectron();
	// mh2DsmADC[iTrg]->Fill(eTrk->trgTowDsmAdc(),eTrk->gMom().perp());
        mh2Btowadc0[iTrg]->Fill(eTrk->adc0(),eTrk->gMom().perp());

	if(eTrk->charge()!=pTrk->charge())
            { 
	      //	      mh3ADC_PhotoUnlike[iTrg]->Fill(eTrk->trgTowDsmAdc(),eTrk->adc0(),eTrk->gMom().perp());
	      mh2DsmADCUnlike[iTrg]->Fill(pTrk->trgTowDsmAdc(),eTrk->gMom().perp());
	      mh2DSMADC_PhotoUnlike[iTrg]->Fill(eTrk->trgTowDsmAdc(),eTrk->gMom().perp());
	      mh2ADC0_PhotoUnlike[iTrg]->Fill(eTrk->adc0(),eTrk->gMom().perp());
	      mh2ADC0_DSMadcPhotoUnlike[iTrg]->Fill(eTrk->adc0(),eTrk->trgTowDsmAdc());
	      mh2InvMassUnlike[iTrg]->Fill(pair->m(),eTrk->gMom().perp(),ps);
	    //	mh2nSigPartUnlike[iTrg]->Fill(nSigma_partner,eTrk->gMom().perp());
                mh3EMC_PartUnlike[iTrg]->Fill(nSigma_partner,eTrk->gMom().perp(),pair->m());
                mh3EtaPhiUnlike[iTrg]->Fill(eTrk->gMom().pseudoRapidity(),eTrk->gMom().phi(),eTrk->gMom().perp());
                mh3EMC_ADCPartUnlike[iTrg]->Fill(nSigma_partner,eTrk->trgTowDsmAdc(),pair->m());
                //dataQA
	    ///、、   cout<<" eTrk->nHitsFit()"<<eTrk->nHitsFit()<<endl;
	    // cout<<"   eTrk->nHitsMax()"<<eTrk->nHitsMax()<<endl;
	    // cout<<"   eTrk->nHitsDedx()"<<eTrk->nHitsDedx()<<endl;
	    // cout<<"   eTrk->nHitsFit()/(Float_t)eTrk->nHitsMax()"<<eTrk->nHitsFit()/(Float_t)eTrk->nHitsMax()<<endl; 
	    
                
	    mHitFit_ptUnlike[iTrg]->Fill(eTrk->gMom().perp(),eTrk->nHitsFit());
	    mNSMDEta_ptUnlike[iTrg]->Fill(eTrk->gMom().perp(),eTrk->nEta());
          
	    mHitsDedxUnlike[iTrg]->Fill(eTrk->gMom().perp(),eTrk->nHitsDedx());
		   //  mNTrackUnlike->[iTrg]->Fill(eTrk->gMom().perp());
	   mNTrack_cutUnlike[iTrg]->Fill(eTrk->gMom().perp());
	   mFitPos_ptUnlike[iTrg]->Fill(eTrk->gMom().perp(),eTrk->nHitsFit()/(Float_t)eTrk->nHitsMax());
	   mgDcaUnlike[iTrg]->Fill(eTrk->gMom().perp(),eTrk->dca());
	  
	   mPhi_ptUnlike[iTrg]->Fill(eTrk->gMom().perp(),eTrk->gMom().phi());
           mEta_ptUnlike[iTrg]->Fill(eTrk->gMom().perp(),eTrk->gMom().pseudoRapidity());

	   mDedxUnlike[iTrg]->Fill(eTrk->gMom().perp(),eTrk->dEdx());
	  
	
	   mPoeUnlike[iTrg]->Fill(eTrk->gMom().mag()/eTrk->e0(),eTrk->gMom().perp());
	

  }
	if(eTrk->charge()==pTrk->charge()) 
	  {
	    // mh3ADC_Photolike[iTrg]->Fill(eTrk->trgTowDsmAdc(),eTrk->adc0(),eTrk->gMom().perp());
	    mh2DSMADC_Photolike[iTrg]->Fill(eTrk->trgTowDsmAdc(),eTrk->gMom().perp());
	    mh2ADC0_Photolike[iTrg]->Fill(eTrk->adc0(),eTrk->gMom().perp());	    
	    mh2DsmADClike[iTrg]->Fill(eTrk->trgTowDsmAdc(),eTrk->gMom().perp());
	    mh2ADC0_DSMadcPhotolike[iTrg]->Fill(eTrk->adc0(),eTrk->trgTowDsmAdc());
	    mh2InvMasslike[iTrg]->Fill(pair->m(),eTrk->gMom().perp(),ps);
	  //  mh2nSigPartlike[iTrg]->Fill(nSigma_partner,eTrk->gMom().perp());
	    mh3EMC_Partlike[iTrg]->Fill(nSigma_partner,eTrk->gMom().perp(),pair->m());
	    mh3EtaPhilike[iTrg]->Fill(eTrk->gMom().pseudoRapidity(),eTrk->gMom().phi(),eTrk->gMom().perp());
	    mh3EMC_ADCPartlike[iTrg]->Fill(nSigma_partner,eTrk->trgTowDsmAdc(),pair->m());
	    mHitFit_ptlike[iTrg]->Fill(eTrk->gMom().perp(),eTrk->nHitsFit());

	    //	    mNSMDEta_ptlike[iTrg]->Fill(eTrk->gMom().perp(),eTrk->nEta());
            mHitsDedxlike[iTrg]->Fill(eTrk->gMom().perp(),eTrk->nHitsDedx());

	    mNTrack_cutlike[iTrg]->Fill(eTrk->gMom().perp());
	    mFitPos_ptlike[iTrg]->Fill(eTrk->gMom().perp(),eTrk->nHitsFit()/(Float_t)eTrk->nHitsMax());
	    mgDcalike[iTrg]->Fill(eTrk->gMom().perp(),eTrk->dca());	 
	    mPhi_ptlike[iTrg]->Fill(eTrk->gMom().perp(),eTrk->gMom().phi());
	    mEta_ptlike[iTrg]->Fill(eTrk->gMom().perp(),eTrk->gMom().pseudoRapidity());  
	    mDedxlike[iTrg]->Fill(eTrk->gMom().perp(),eTrk->dEdx()); 
	    mPoelike[iTrg]->Fill(eTrk->gMom().mag()/eTrk->e0(),eTrk->gMom().perp());

    }
    }
}
/*Bool_t StNpeRead:: isGoodEvent(StDmesonEvent * evt,Bool_t & bVPDMB,Bool_t & bHT1_BBCMB_TOF0 ,Bool_t& bHT2_BBCMB)
  
{
  if(!(evt->isVPDMB() || evt->isHT1_BBCMB_TOF0() || evt->isHT2_BBCMB() || evt->isBBCMB_TOF0() || evt->isBBCMB())) return kFALSE; 
  
  // reject bad runs
  if(badruns::is_bad_run(evt->runId(),-1)) return kFALSE;
  
  bVPDMB = kFALSE;
  bHT1_BBCMB_TOF0 = kFALSE;
  bHT2_BBCMB = kFALSE;
  
  Bool_t bPass = kTRUE;
  Float_t vz = evt->primaryVertex().z();
  if (!(evt->ranking() > 0)) bPass = kFALSE;
  if (fabs(vz) > cuts::vz) bPass = kFALSE;
  
  bVPDMB = evt->isVPDMB() && bPass && fabs(vz - evt->vzVpd()) < cuts::vzVpdVz;
  bHT1_BBCMB_TOF0 = evt->isHT1_BBCMB_TOF0() && bPass && !badruns::is_bad_run(evt->runId(),HT1BBCMBTOF0);
  bHT2_BBCMB = evt->isHT2_BBCMB() && bPass; // there is no other condition for this trigger
  
  bPass = bVPDMB || bHT1_BBCMB_TOF0 || bHT2_BBCMB;
  return bPass;
  }
//-----------------------------------------------------------------------------
Bool_t StNpeRead::isTrgTrack(StDmesonTrack* trk,UShort_t htTrg)
{
if(trk->trgTowDsmAdc()<=11) return kFALSE;

if(htTrg==0 && trk->trgTowDsmAdc()>11) return kTRUE;
if(htTrg==1 && trk->trgTowDsmAdc()>15) return kTRUE;
if(htTrg==2 && trk->trgTowDsmAdc()>18) return kTRUE;

   return kFALSE;
   }
*/
void StNpeRead::Fill_event_hist( StDmesonEvent* Event,Int_t bTrg,Double_t ps)


{
  //  if(evt->isHT0_BBCMB_TOF0() || evt->isHT2_BBCMB())
  Float_t a=4;
  Float_t b=4; 
      if(Event->isHT0_BBCMB_TOF0()) a=0.5;
      else a=1.5;
      if(Event->isHT2_BBCMB()) b=0.5;
      else b=1.5;
       HT0_HT2->Fill(a,b);


  // Double_t ps=0; 
  //Event
  Float_t Vz=Event->primaryVertex().z();
  Float_t Vy=Event->primaryVertex().y();
  Float_t Vx=Event->primaryVertex().x();


   if(bTrg==0)
   ps=mPrescales->GetPrescale(Event->runId(),HT0BBCMBTOF0);

  if(bTrg==2)
   ps=mPrescales->GetPrescale(Event->runId(),HT2BBCMB);

  if(ps>0)
    {  
  // cout<<" btrg  "<<bTrg<<"ps   "<<ps<<endl;
  mh1Vz[bTrg]->Fill(Vz);
  mh1VzPS[bTrg]->Fill(Vz,ps);
 mh2Vxy[bTrg]->Fill(Vx,Vy);
    }
}
//eID cuts
Bool_t StNpeRead::pass_cut_nsigmaE(StDmesonTrack* trk)
{ if(!trk) return kFALSE;
  Float_t nSigmaE=trk->nSigmaElectron();
  
      if(nSigmaE>cuts::nsigmae_low && nSigmaE<cuts::nsigmae_high)  
	return kTRUE;
  else return kFALSE;
      
}
Bool_t StNpeRead::pass_cut_poe(StDmesonTrack * trk)
{
  Float_t P=trk->gMom().mag();
  Float_t E=trk->e0();
  //cout<<""
  if(P/E>cuts::poe_low && P/E<cuts::poe_high)
    return kTRUE;
  else return kFALSE;
}

Bool_t StNpeRead::pass_cut_GoodTrack(StDmesonTrack * trk)
{
  
  Float_t Pt=trk->gMom().perp();
  Float_t eTa=trk->gMom().pseudoRapidity();
  // Float E=trk->e();

  
    Int_t nhitDedx=trk->nHitsDedx();
  Int_t nhitsFit=trk->nHitsFit();
  Int_t nhitsMax=trk->nHitsMax();
  
  
  //  cout<<"pt    "<<Pt<<endl;
  // cout<<"nEta"<<nEta<<endl;
  // cout<<"nPh1"<<nPhi<<endl;
  
  // Float_t Dz=trk->zDist();
  //   Float_t Dphi=trk->phiDist();
  // cout<<"Dz  "<<Dz<<endl;
  // cout<<"DPhi"<<Dphi<<endl;
  Float_t gDca=trk->dca();  
  Float_t first_point= trk->firstTpcPointR();
  //cout<<"first"<<Ds_fst<<endl;
  if(gDca<cuts::gDca && cuts::nhitDedx<nhitDedx &&  nhitsFit>cuts::nhitsFit && (Float_t) nhitsFit/nhitsMax>cuts::nhit_Possmax  &&  first_point<cuts::first_point_cut)
    
    return kTRUE;
  else return kFALSE;
  
  
}
Bool_t StNpeRead::pass_cut_Pt_Eta(StDmesonTrack *trk)
{
  Float_t Pt=trk->gMom().perp();
  Float_t eTa=trk->gMom().pseudoRapidity();
  if(fabs(eTa)<cuts::eta_low && Pt>cuts::pt)
    return kTRUE;
  else return kFALSE;
}
Bool_t StNpeRead::pass_cut_EMC(StDmesonTrack *trk)
{
  Int_t nEta=trk->nEta();
  Int_t nPhi=trk->nPhi();
  if(nEta>cuts::NEta && nPhi>cuts::NPhi)
    return kTRUE;
  else return kFALSE;
}
//-----------------------------------------------------------------------------

Bool_t StNpeRead::isHotTower(StDmesonTrack *trk,Int_t bTrg)
{

  Int_t  HT0_Hot_towerlist[] ={32,52,115,246,268,276,294,386,510,562,682,750,773,894,987,994,1043,1064,1143,1233,1264,1285,1307,1487,1593,1710,1733,1823,1824,1851,1946,2022,2044,2064,2110,2146,2163,2165,2203,2291,2314,2522,2530,2634,2653,2835,2864,2866,2973,3006,3062,3533,3545,3727,3862,3949,4051,4131,4170,4263,4431,4459,4684,4685,4686,4705,4767};

 Int_t HT2_Hot_towerlist[]={32,52,115,268,276,294,295,510,562,682,750,987,994,1064,1143,1233,1264,1285,1307,1487,1593,1733,1824,1851,1946,2044,2163,2203,2634,2653,2835,2864,2866,2973,3006,3727,3862,4131,4170,4263,4431,4459,4684,4685,4686,4705,4767};


  //ht0 hot tower
  //  if(bTrg==0)
     
      for(Int_t i=0;i<sizeof(HT0_Hot_towerlist)/HT0_Hot_towerlist[0];i++ )
	{
	  if( bTrg==0 && HT0_Hot_towerlist[i]==trk->btowId())
	    return kTRUE;
	}
      // return kFALSE;
      //}
  //
      //  if(bTrg==2)
    
      for(Int_t i=0;i<sizeof(HT2_Hot_towerlist)/HT2_Hot_towerlist[0];i++ )
        {
          if( bTrg==2 && HT2_Hot_towerlist[i]==trk->btowId())
            return kTRUE;
        }
      return kFALSE;
    

}

Bool_t StNpeRead::isGoodEvent(StDmesonEvent* evt,Int_t& bTrg)
{
  if(!evt) return kFALSE;
 if(badruns::is_bad_run(evt->runId(),-1)) return kFALSE;
  // cuts
  Float_t vz = evt->primaryVertex().z();
   if (!(evt->ranking() >0 )) return kFALSE;
   if(fabs(vz) > cuts::vz) return kFALSE;
   if(evt->isBBCMB() ||evt->isHT2_BBCMB())
     { 
       Double_t ps_BBCMB=mPrescales->GetPrescale(evt->runId(),BBCMB);
       Double_t ps_HT2BBCMB=mPrescales->GetPrescale(evt->runId(),HT2BBCMB);
       if( ps_BBCMB>0 && ps_HT2BBCMB>0)                
	 {
	   if(evt->isBBCMB())
	     {
	   mh1Vz_BBCMB->Fill(vz);
	   mh1Vz_BBCMBPS->Fill(vz,ps_BBCMB);
	     }	 
	 }    
     }

   if(evt->isBBCMB_TOF0() ||evt->isHT0_BBCMB_TOF0())
     {
       Double_t ps_HT0_BBCMB_TOF0=mPrescales->GetPrescale(evt->runId(),HT0BBCMBTOF0);
       Double_t ps_BBCMB_TOF0=mPrescales->GetPrescale(evt->runId(),BBCMBTOF0);
       if( ps_BBCMB_TOF0>0 && ps_HT0_BBCMB_TOF0>0)
	 {
	   if( evt->isBBCMB_TOF0())     
	     {  mh1Vz_BBCMBTOF0->Fill(vz);
	       mh1Vz_BBCMBTOF0PS->Fill(vz,ps_BBCMB_TOF0);
	     }	
	 }
     }
   //   if(evt->isHT0_BBCMB_TOF0() || evt->isHT2_BBCMB())
   if( evt->isBBCMB_TOF0()||evt->isBBCMB())

  
  return kTRUE;
   else 
     return kFALSE; 
}
    
